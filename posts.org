#+hugo_base_dir: ./
* About
:PROPERTIES:
:export_hugo_section: ./
:END:

** DONE (Yet Another) Intro
CLOSED: [2022-11-14 Mon 23:58]
:PROPERTIES:
:EXPORT_FILE_NAME: about
:END:

[[/images/about-photo.png]]

Hi, I'm Woosang, currently a CS undergraduate at a college in Upstate New York. My interest lies on creating resilient backend services (especially for Go), building foolproof measures for development procedures (e.g. CI pipelines), and tweaking Emacs configs.

On my spare time, I like to [[https://youtu.be/qyQLNk6QoJk][make music]], hike mountains and chill with my cats.

* Posts
:PROPERTIES:
:export_hugo_section: posts
:END:

** DONE First Post! :org:hugo:@scribbles:
CLOSED: [2022-11-12 Sat 18:56]
:PROPERTIES:
:EXPORT_FILE_NAME: first-post
:END:

I used to maintain a rather clunky blog, which was a mixture of =Gulp 4= and =Sass=, but finally gathered my willpower to move on to a lightweight platform.
+ Due to all the heavy assets, the blog template itself (devoid of any content) took up about 10MB. Some parts were brought from a obscure source, so I really did not have a clear understanding of what was going on under the hood.
+ Adding a new page was a pain with the absence of an universial template; dealing with all the HTML tags and what not. I wanted a platform where I could easily jot down stuff, not a polished space without any real content.
That was when I ran into [[https://gohugo.io][Hugo]] paired with [[https://ox-hugo.scripter.co/][ox-Hugo]], a backend that exports Org-mode docs in Emacs to Hugo-compatible MD files. And after my first take, I can't help but appreciate the convenience!
+ The whole [[https://github.com/paul-kang-1/pr-website][Blog repo]] stays under 1KB, and I can leverage tools like =Org-capture= to easily create new posts.
+ With the below command and some use of [[https://ox-hugo.scripter.co/doc/auto-export-on-saving/][autosave setup]], you can introduce hot loading to the local development.
  #+begin_src sh
  hugo server --buildDrafts --navigateToChanged
  #+end_src
Anyway, it feels like I've finally found a nice and cozy setup. Let's see where this leads to!

** DONE Dependency Injection in Go Microservices :dev:go:@TIL:
CLOSED: [2023-01-02 Mon 12:31]
:PROPERTIES:
:EXPORT_FILE_NAME: dependency-injection
:END:

*** Breaking the Code Coupling
Prior to adopting the Dependency Injection pattern, "unit testing" the codebase was virtually impossible, mainly due to its external dependencies (e.g. Firebase Cloud Messaging client). Since all the dependencies were tightly coupled /within/ the function that made use of it, it was necessary to initialize all the third-party dependencies in order to test a small snippet of code that I wrote.

*** Enforcing The Repository Pattern
#+begin_src go
type (
	HallService interface {
		CreateHallWithTx(
			ctx context.Context, sqlTx boil.ContextExecutor, option repositories.HallOption
		) (*models.Hall, error)
		GetHallWithTxOf(
			ctx context.Context, sqlTx boil.ContextExecutor, userID int
		) (*models.Hall, error)
	}

	HallServiceInstance struct {
		hallRepository repositories.HallRepsoitory
	}
)

func NewHallService(h repositories.HallRepository) *HallServiceInstance {
	return &HallServiceInstance{h}
}
#+end_src

*** Facilitating DI with Wire
Although DI improves code readability and eases up the testing procedure, it doesn't exactly scale well as the complexity of the dependency graph increases. Wire provides a number of key advantages compared to manual DI, or other tools like Uber's [[https://github.com/uber-go/dig][dig]]:
+ **Compile-time injection**: It's always to find any discrepancies in the dependency graph prior to running the actual application.
+ **Enhanced readability**: In many cases, there will be several /initialization groups/

** DONE Testing Repository Pattern Softwares in Go (1/2) :dev:go:testing:@TIL:
CLOSED: [2023-01-02 Mon 15:36]
:PROPERTIES:
:EXPORT_FILE_NAME: repository-pattern-testing-1
:END:

It is fairly easy to perform unit tests in the context of a Repository pattern-based software: simply create mock dependencies with predefined behavior, and initialize the target service with them to check the code logic in a vacuum.

** DONE Testing Repository Pattern Softwares in Go (2/2) :dev:go:testing:@TIL:
CLOSED: [2023-01-03 Tue 15:36]
:PROPERTIES:
:EXPORT_FILE_NAME: repository-pattern-testing-2
:END:

While the last post mostly focused on unit testing, which let us test code that we exclusively wrote in a vacuum, one other venue of testing that may be worth exploring would be **integration testing**.

** TODO CI Pipeline for Monorepo-based Microservices
:PROPERTIES:
:EXPORT_FILE_NAME: ci-pipeline-for-monorepo-based-microservices
:END:

WIP Content

** TODO Familiarizing Elisp and Ox-Hugo
:PROPERTIES:
:EXPORT_FILE_NAME: familiarizing-elisp-and-ox-hugo
:END:

WIP Content
